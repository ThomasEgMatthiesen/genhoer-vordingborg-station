#N canvas 90 49 1290 796 12;
#X obj 478 352 loadbang;
#X obj 478 420 snapshot~;
#X obj 479 477 t b f b;
#X msg 682 520 0;
#X msg 506 511 1;
#X obj 510 687 spigot;
#X obj 426 616 until;
#X obj 472 725 print;
#X obj 343 585 print until;
#X obj 504 566 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 415 352 adc~ 1;
#X obj 415 386 hip~ 5;
#X obj 478 386 delay 500;
#X text 327 453 Ensure it's positive;
#X obj 478 452 abs;
#X obj 426 533 % 1000;
#X obj 633 618 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 268 351 Remove DC component;
#X text 525 663 Ignore all the "seeding" outputs;
#X text 172 509 Make it big enough to be meaningful;
#X text 32 534 But keep it in a small enough range to avoid too large untils;
#X text 172 387 Especially good for analog inputs;
#X obj 425 509 * 1e+07;
#X text 549 351 << wait a bit for the highpass to take the signal around 0;
#X obj 426 643 random 10;
#X obj 503 591 metro 1000;
#X text 54 115 You can use a random input from the adc to advance the [random] object by a "random" amount (e.g.: bang it hundreds of times depending on the value of a snapshot of the adc~., f 123;
#X text 56 50 The random-object outputs the same numbers each time. Good thing with Bela is that you have some actual random noise sources available in the audio input and analog input \, so you could use a snapshot of those to set the seed for your [random]., f 123;
#X text 58 241 The 500 ms delay on boot may be excessive \, the [hip~ 5] is probably much faster than that. Also \, with the [%] operator in the loop \, maybe we could get rid of the [hip~] altogether., f 123;
#X text 57 167 The actual number of different "seeds" is the argument of the [% ...] object \, assuming that the multiplier above it is enough to fill it up. If the number sent to [until] is too large \, it may cause an underrun \, but that could be acceptable as the patch just started. Making it larger than 65536 won't make sense because that'd be higher than the resolution of the noise., f 122;
#X obj 1258 509 loadbang;
#X obj 1258 567 snapshot~;
#X obj 1202 509 adc~ 1;
#X obj 1202 538 hip~ 5;
#X obj 1258 596 abs;
#X obj 1258 625 * 1e+07;
#X obj 1258 712 random 10;
#X msg 1258 683 seed \$1;
#X obj 1258 654 % 1000;
#X obj 1258 741 print r1;
#X obj 1258 538 delay 100;
#X obj 1142 636 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 1142 660 metro 1000;
#X obj 1141 604 delay 100;
#X text 601 429 RANDOM TRIGGER OFFSET;
#X text 1016 541 RANDOM SEED INPUT;
#X connect 0 0 12 0;
#X connect 1 0 14 0;
#X connect 2 0 4 0;
#X connect 2 1 22 0;
#X connect 2 2 3 0;
#X connect 3 0 16 0;
#X connect 4 0 16 0;
#X connect 4 0 9 0;
#X connect 5 0 7 0;
#X connect 6 0 24 0;
#X connect 9 0 25 0;
#X connect 10 0 11 0;
#X connect 11 0 1 0;
#X connect 12 0 1 0;
#X connect 14 0 2 0;
#X connect 15 0 8 0;
#X connect 15 0 6 0;
#X connect 16 0 5 1;
#X connect 22 0 15 0;
#X connect 24 0 5 0;
#X connect 25 0 24 0;
#X connect 30 0 40 0;
#X connect 31 0 34 0;
#X connect 32 0 33 0;
#X connect 33 0 31 0;
#X connect 34 0 35 0;
#X connect 35 0 38 0;
#X connect 36 0 39 0;
#X connect 37 0 36 0;
#X connect 38 0 37 0;
#X connect 40 0 31 0;
#X connect 40 0 43 0;
#X connect 41 0 42 0;
#X connect 42 0 36 0;
#X connect 43 0 41 0;
